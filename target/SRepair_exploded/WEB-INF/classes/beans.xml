<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="top.xiaohang456.srepair"/>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:jdbc.properties"/>
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <!-- results in a setDriverClassName(String) call -->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>

        <!-- 基于xml配置文件的mapper -->
        <!--<property name="mappingResources">
            <list>
                <value>WxUser.hbm.xml</value>
            </list>
        </property>-->

        <!--基于注解的mapper，要写上每一个具体的实体类
        <property name="annotatedClasses">
            <list>
                <value>top.xiaohang456.springIntegration.model.WxUser</value>
            </list>
        </property>
        -->

        <!--基于注解的mapper，写上要扫描包名即可，与上边的二选一  -->
        <property name="packagesToScan">
            <list>
                <value>top.xiaohang456.srepair.model</value>
            </list>
        </property>

        <property name="hibernateProperties">
            <props>
                <!--数据库连接池的大小-->
                <prop key="hibernate.connection.pool.size">20</prop>
                <!--是否在后台显示Hibernate用到的SQL语句，开发时设置为true，便于差错，程序运行时可以在Eclipse的控制台显示Hibernate的执行Sql语句。项目部署后可以设置为false，提高运行效率-->
                <prop key="hibernate.show_sql">true</prop>
                <!--格式化在控制台输出的SQL语句，使SQL语句看起来更美观一些，而不是全部都在一行上面-->
                <prop key="hibernate.format_sql">true</prop>
                <!--指定每次Session从SessionFactory中用GetCurrentSession方法取出时候，所用到的SessionFactory的范围（上下文环境）。-->
                <!-- 此项与spring冲突！！！ -->
                <!--<prop key="hibernate.current_session_context_class">thread</prop>-->
                <!--执行语句是否需要重新建表-->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!--jdbc.fetch_size是指Hibernate每次从数据库中取出并放到JDBC的Statement中的记录条数。Fetch Size设的越大，读数据库的次数越少，速度越快，Fetch Size越小，读数据库的次数越多，速度越慢-->
                <prop key="jdbc.fetch_size">50</prop>
                <!--jdbc.batch_size是指Hibernate批量插入,删除和更新时每次操作的记录数。Batch Size越大，批量操作的向数据库发送Sql的次数越少，速度就越快，同样耗用内存就越大-->
                <prop key="jdbc.batch_size">23</prop>
                <!--jdbc.use_scrollable_resultset是否允许Hibernate用JDBC的 可滚动的结果集。对分页的结果集。对分页时的设置非常有帮助-->
                <prop key="jdbc.use_scrollable_resultset">false</prop>
                <!--connection.useUnicode连接数据库时是否使用Unicode编码-->
                <prop key="Connection.useUnicode">true</prop>
                <!--connection.characterEncoding连接数据库时数据的传输字符集编码方式，最好设置为gbk，用gb2312有的字符不全-->
                <prop key="connection.characterEncoding">utf-8</prop>
                <!--hibernate.dialect 只是Hibernate使用的数据库方言,就是要用Hibernate连接那种类型的数据库服务器。-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
            </props>
        </property>
    </bean>

    <!-- 为SessionFactory添加事务管理的bean -->
    <bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 基于注解的事务管理 -->
    <!--<tx:annotation-driven transaction-manager="txManager"/>-->

    <!-- 基于配置的xml管理(或者说是使用txManager的说明配置)，使用一下配置管理之后，你就不用每次调用session之后，再去写事务的操作了。以下配置会为你织入事务操作。 -->
    <aop:config>
        <aop:pointcut id="bussinessService"
                      expression="execution(public * top.xiaohang456.srepair.dao.*.*(..))"/>
        <aop:advisor pointcut-ref="bussinessService"
                     advice-ref="txAdvice"/>
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="exists" read-only="true"/>
            <tx:method name="save" />
            <tx:method name="update" read-only="false"/>
        </tx:attributes>
    </tx:advice>

    <!-- 你可以不用那么麻烦，直接把HibernateTemplete加载出来，它的作用就是替代事务管理器，和session。它封装了绝大部分session有的方法。 -->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

</beans>
